package br.com.dbc.vemser.imperiodasfichas.documentacao;

import br.com.dbc.vemser.imperiodasfichas.dtos.autenticacao.LoginDTO;
import br.com.dbc.vemser.imperiodasfichas.dtos.autenticacao.RegisterDTO;
import br.com.dbc.vemser.imperiodasfichas.dtos.autenticacao.TrocarSenhaDTO;
import br.com.dbc.vemser.imperiodasfichas.dtos.autenticacao.UsuarioResponseDTO;
import br.com.dbc.vemser.imperiodasfichas.exceptions.RegraDeNegocioException;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;

import javax.validation.Valid;

@Tag(
        name = "üîê Autentica√ß√£o e Usu√°rios",
        description = """
        üîë Endpoints para autentica√ß√£o e gerenciamento de contas de usu√°rios

        | Opera√ß√£o                   | M√©todo HTTP | Descri√ß√£o                                     |
        |----------------------------|-------------|-----------------------------------------------|
        | Login                      | POST        | Autentica o usu√°rio e retorna um token JWT    |
        | Registrar usu√°rio         | POST        | Cria novo usu√°rio e autentica automaticamente |
        | Ativar usu√°rio            | POST        | Ativa um usu√°rio pelo login                   |
        | Desativar usu√°rio         | POST        | Desativa um usu√°rio pelo login                |
        | Trocar senha              | PATCH       | Atualiza a senha do usu√°rio                   |
        | Buscar usu√°rio logado    | GET         | Retorna os dados do usu√°rio autenticado       |
        """
)
public interface AuthControllerDoc {

    @Operation(
            summary = "üîê Login",
            description = "Autentica um usu√°rio e retorna o token JWT"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "‚úÖ Sucesso - Token JWT gerado"),
            @ApiResponse(responseCode = "401", description = "‚ùå Erro - Credenciais inv√°lidas")
    })
    String auth(
            @RequestBody @Valid LoginDTO loginDTO
    ) throws RegraDeNegocioException;

    @Operation(
            summary = "üìù Registrar usu√°rio",
            description = "Cria um novo usu√°rio no sistema e autentica automaticamente"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "‚úÖ Sucesso - Token JWT gerado"),
            @ApiResponse(responseCode = "400", description = "‚ùå Erro - Dados inv√°lidos"),
            @ApiResponse(responseCode = "500", description = "‚ùå Erro - Falha ao autenticar ap√≥s registro")
    })
    ResponseEntity<String> createUser(
            @RequestBody @Valid RegisterDTO registerDTO
    ) throws RegraDeNegocioException;

    @Operation(
            summary = "üö´ Desativar usu√°rio",
            description = "Desativa o usu√°rio com base no login informado"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "‚úÖ Sucesso - Usu√°rio desativado"),
            @ApiResponse(responseCode = "404", description = "‚ùå Erro - Usu√°rio n√£o encontrado")
    })
    ResponseEntity<String> desativarUsuario(
            @PathVariable String login
    ) throws RegraDeNegocioException;

    @Operation(
            summary = "‚úÖ Ativar usu√°rio",
            description = "Ativa o usu√°rio com base no login informado"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "‚úÖ Sucesso - Usu√°rio ativado"),
            @ApiResponse(responseCode = "404", description = "‚ùå Erro - Usu√°rio n√£o encontrado")
    })
    ResponseEntity<String> ativarUsuario(
            @PathVariable String login
    ) throws RegraDeNegocioException;

    @Operation(
            summary = "üîÑ Trocar senha",
            description = "Permite que o usu√°rio troque sua senha"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "‚úÖ Sucesso - Senha atualizada"),
            @ApiResponse(responseCode = "400", description = "‚ùå Erro - Dados inv√°lidos")
    })
    ResponseEntity<String> trocarSenha(
            @RequestBody @Valid TrocarSenhaDTO trocarSenhaDTO
    ) throws RegraDeNegocioException;

    @Operation(
            summary = "üôã‚Äç‚ôÄÔ∏è Buscar usu√°rio logado",
            description = "Retorna os dados do usu√°rio atualmente autenticado"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "‚úÖ Sucesso - Dados do usu√°rio logado"),
            @ApiResponse(responseCode = "403", description = "‚ùå Erro - Acesso negado (n√£o autenticado)")
    })
    ResponseEntity<UsuarioResponseDTO> getLoggedUser() throws RegraDeNegocioException;

}
